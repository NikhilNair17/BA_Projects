use nikhilintellipat_project
select * from COGS_fact;
select * from COGS_Location;
select * from COGS_Product;

alter COGS_Product add primary key(ProductId)
--1. Display the number of states present in the LocationTable
select count(distinct state) as Total_State from  COGS_Location;
--2. How many products are of regular type?
select count(Product_Type) as Regular_Product from COGS_Product where Type ='Regular';
--3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as MarketExp from COGS_fact where ProductId =1;
--4. What is the minimum sales of a product?
select min(Sales) as Min_Sale from COGS_fact;
--5. Display the max Cost of Good Sold (COGS).
select max(COGS) as MAX_COGS from COGS_fact;
--6. Display the details of the product where product type is coffee.
select * from COGS_Product where Product_Type='Coffee';
--7. Display the details where total expenses are greater than 40.
select * from COGS_fact where Total_Expenses >40;
--8. What is the average sales in area code 719?
select AVG(Sales) as Avg_Sales from COGS_fact where Area_Code =719;
--9. Find out the total profit generated by Colorado state.
select sum(total_Expenses) as profit_State from COGS_fact as F inner join COGS_Location as L on L.Area_Code=F.Area_Code where state='Colorado' group by state;
--10. Display the average inventory for each product ID.
select avg(Inventory)  as avg_invt ,ProductId from COGS_fact group by ProductId;
--11. Display state in a sequential order in a Location Table.
select State from COGS_Location order by State;
--12. Display the average budget of the Product where the average budget
--margin should be greater than 100.
select AVG(F.Budget_Margin) as avg_bdgmargin,P.Product from COGS_fact as F inner join COGS_Product as P on F.ProductId=P.ProductId  group by P.Product having AVG(F.Budget_Margin) > 100 ;
--13. What is the total sales done on date 2010-01-01?
select sum(sales) as SUM_Sales from COGS_fact where date ='2010-01-01';
--14. Display the average total expense of each product ID on an individual date.
select avg(total_expenses) as AVG_,ProductId,Date from COGS_fact group by ProductId,date;
--15. Display the table with the following attributes such as date, productID,
--product_type, product, sales, profit, state, area_code.
select f.date, f.productID,p.product_type, p.product, f.sales, f.profit, l.state, l.Area_Code from COGS_fact as f join  COGS_Product as p on f.ProductId =p.ProductId join COGS_Location as L on F.Area_Code =L.Area_Code;
--16. Display the rank without any gap to show the sales wise rank.
select sales,DENSE_RANK() over (order by sales asc) from COGS_fact;
--17. Find the state wise profit and sales.
select sum(profit) as total_profit,sum(sales)as total_sales,State from COGS_fact as F join COGS_Location as l on F.Area_Code=L.Area_Code group by L.State;
--18. Find the state wise profit and sales along with the product name.
select sum(profit) as total_profit,sum(sales)as total_sales,State,product from COGS_fact as F join COGS_Location as l on F.Area_Code=L.Area_Code join COGS_Product as p on F.ProductId=p.ProductId group by L.State,P.Product;
--19. If there is an increase in sales of 5%, calculate the increasedsales.
select sales,sales*1.05 as increasedsale from COGS_fact;
--20. Find the maximum profit along with the product ID and producttype.
select max(profit) max_profit ,p.ProductId,Type from COGS_fact as F inner join COGS_Product as P on F.ProductId=p.ProductId group by p.ProductId,type; 
--21. Create a stored procedure to fetch the result according to the product type
--from Product Table.
alter proc dbo.Product_StoreProc
@type varchar(50)
as begin
select * from COGS_Product where Type=@type
end
exec dbo.Product_StoreProc'Regular';
--22. Write a query by creating a condition in which if the total expenses is less than
--60 then it is a profit or else loss.
select * ,case  when Total_Expenses <60 then 'profit' else 'loss' end as Profit_Loss from COGS_fact;
--23. Give the total weekly sales value with the date and product ID details. Use
--roll-up to pull the data in hierarchical order.
select sum(Sales) as total_sales_weekly,date,ProductId,datepart(week,date) as week_ from COGS_fact group by rollup(datepart(week,date),date,ProductId);
--24. Apply union and intersection operator on the tables which consist of
--attribute area code.
select Area_Code from COGS_fact union select area_code from COGS_Location;
select Area_Code from COGS_fact intersect select area_code from COGS_Location;
--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the userâ€™s preference.
create function dbo.product_function (@producttype varchar(50))
returns table
as return (select * from COGS_Product where type=@producttype);

select * from dbo.product_function ('Regular')
--26. Change the product type from coffee to tea where product ID is 1 and undo
--it.
select * from COGS_Product
begin try
begin transaction
update COGS_Product set Product_Type ='tea' where Product_Type='coffee' and productId = 1
select * from COGS_Product where productId =1;
rollback transaction
print 'updated rollback  sucessfully'
end try
begin catch
rollback transaction
print' an error occured while update and rollback'
end catch

--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.
select  date,productId,sales from COGS_fact where Total_Expenses between 100 and 200;
--28. Delete the records in the Product Table for regular type.
delete from COGS_Product where type ='Regular'    ---hasnt excuted 
--29. Display the ASCII value of the fifth character from the columnProduct.
select ASCII (SUBSTRING(Product,5,1)) from COGS_Product;